-- Ensure 'lazy.nvim' is installed
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
        "git",
        "clone",
        "--filter=blob:none",
        "https://github.com/folke/lazy.nvim.git",
        "--branch=stable",
        lazypath,
    })
end
vim.opt.rtp:prepend(lazypath)

-- Plugin setup using 'lazy.nvim'
require("lazy").setup({
    -- Core plugins
    "nvim-lua/plenary.nvim",
    "nvim-tree/nvim-tree.lua",
    "nvim-lualine/lualine.nvim",
    "akinsho/bufferline.nvim",
    "neovim/nvim-lspconfig",
    "L3MON4D3/LuaSnip",
    "windwp/nvim-autopairs",
    "numToStr/Comment.nvim",
    "lewis6991/gitsigns.nvim",
    "nvim-telescope/telescope.nvim",
    "nvim-treesitter/nvim-treesitter",
    "nvim-neotest/neotest",
    "nvim-neotest/neotest-python",
    "nvim-neotest/nvim-nio",
    "goolord/alpha-nvim",  -- Ensure alpha-nvim is included
}, {
    defaults = {
        lazy = true,
        version = "*",
    },
})

-- alpha-nvim Configuration
local alpha = require('alpha')
local dashboard = require('alpha.themes.dashboard')

-- Custom dashboard header
dashboard.section.header.val = {
    "    _/_/_/_/_/  _/_/_/_/  _/_/_/      _/_/    _/_/_/_/_/  _/_/_/      _/_/      _/_/_/  _/_/_/_/   ",
    "         _/    _/        _/    _/  _/    _/      _/      _/    _/  _/    _/  _/        _/          ",
    "      _/      _/_/_/    _/_/_/    _/    _/      _/      _/_/_/    _/_/_/_/  _/        _/_/_/       ",
    "   _/        _/        _/    _/  _/    _/      _/      _/    _/  _/    _/  _/        _/            ",
    "_/_/_/_/_/  _/_/_/_/  _/    _/    _/_/        _/      _/    _/  _/    _/    _/_/_/  _/_/_/_/",
    "  \"The only true wisdom is in knowing you know nothing.\"",
    "                                  — Socrates"
}

-- Custom dashboard footer
dashboard.section.footer.val = "ZeroTrace - Nothing Matters"

-- Set the options for alpha-nvim
alpha.setup(dashboard.opts)

-- lualine.nvim Configuration
local lualine = require('lualine')

lualine.setup({
    options = {
        icons_enabled = true,
        theme = 'onedark',  -- You can change this to any other supported theme
        component_separators = { left = '', right = '' },
        section_separators = { left = '', right = '' },
        disabled_filetypes = {},
        always_divide_middle = true,
    },
    sections = {
        lualine_a = { 'mode' },
        lualine_b = { 'branch', 'diff', 'diagnostics' },
        lualine_c = { 'filename' },
        lualine_x = { 'filetype', 'encoding', 'fileformat' },
        lualine_y = { 'progress' },
        lualine_z = { 'location' },
    },
    inactive_sections = {
        lualine_a = {},
        lualine_b = {},
        lualine_c = { 'filename' },
        lualine_x = { 'location' },
        lualine_y = {},
        lualine_z = {},
    },
    tabline = {},
    extensions = {},
})

-- General Neovim settings
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.hlsearch = false
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.wrap = false
vim.opt.scrolloff = 8
vim.opt.signcolumn = "yes"
vim.opt.updatetime = 50
vim.opt.splitbelow = true
vim.opt.splitright = true
vim.opt.tabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.cursorline = true
vim.opt.colorcolumn = "80"
vim.opt.termguicolors = true
vim.opt.background = "dark"
vim.opt.mouse = "a"
vim.opt.clipboard = "unnamedplus"
vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.undofile = true
vim.opt.wildmode = "longest:full,full"
vim.opt.lazyredraw = true
vim.opt.cmdheight = 2
vim.opt.foldmethod = "indent"
vim.opt.foldlevel = 99
vim.opt.list = true
vim.opt.listchars = "tab:» ,trail:·"
vim.opt.timeoutlen = 300
vim.opt.updatetime = 100
vim.opt.foldenable = false
vim.opt.pumblend = 10
vim.opt.winblend = 10

-- Keybindings
vim.api.nvim_set_keymap('n', '<Leader>ff', ':Telescope find_files<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>fg', ':Telescope live_grep<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>fb', ':Telescope buffers<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>fh', ':Telescope help_tags<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>tt', ':NvimTreeToggle<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>tl', ':NvimTreeFindFile<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>bb', ':BufferLinePick<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>bc', ':BufferLinePickClose<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>tn', ':Tabnew<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>tc', ':Tabclose<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>sp', ':Split<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>so', ':Split<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>pm', ':PackerUpdate<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>ps', ':PackerSync<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>ca', ':LspCodeAction<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>rr', ':LspRestart<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>rn', ':LspRename<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>gd', ':LspDefinition<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>gi', ':LspImplementation<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>gr', ':LspReferences<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>de', ':LspDiagnostics<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>f', ':Format<CR>', { noremap = true, silent = true })




